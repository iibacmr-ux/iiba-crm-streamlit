# -*- coding: utf-8 -*-
"""
IIBA Cameroun ‚Äî CRM Streamlit (monofichier)
Version enrichie : param√©trage complet via Admin, rollback auto, scoring, KPI, rapports
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import os
from pathlib import Path
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

# -----------------------
# FICHIERS & CONSTANTES
# -----------------------
DATA_DIR = Path(".")
PARAM_FILE = DATA_DIR / "parametres.csv"
BACKUP_DIR = DATA_DIR / "backups"
BACKUP_DIR.mkdir(exist_ok=True)

CRITICAL_KEYS = [
    "Genres", "Types_contact", "Statuts_engagement", "Secteurs", "Pays", "Villes",
    "Sources", "Canaux", "Resultats_interaction", "Types_evenements", "Lieux",
    "Statuts_paiement", "Moyens_paiement", "Types_certification", "Entreprises_cibles",
    "Seuil_VIP", "Poids_Interaction", "Poids_Participation", "Poids_Paiement_regle",
    "Fenetre_interactions_jours", "Interactions_min", "Participations_min",
    "Colonnes_CRM", "KPI_visibles", "KPI_activ√©s", "Cibles"
]

# -----------------------
# HELPERS PARAMETRES
# -----------------------

def backup_param_file():
    """Cr√©e une sauvegarde horodat√©e de parametres.csv"""
    if PARAM_FILE.exists():
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = BACKUP_DIR / f"parametres_backup_{ts}.csv"
        PARAM_FILE.rename(backup_path)
        backup_path.rename(PARAM_FILE)  # garder le fichier en place
        return backup_path
    return None

def load_parametres():
    """Charge le fichier de param√®tres en DataFrame pivot√© cl√©‚Üívaleur"""
    if not PARAM_FILE.exists():
        # init par d√©faut
        default_data = {k: "" for k in CRITICAL_KEYS}
        df = pd.DataFrame(list(default_data.items()), columns=["cl√©", "valeur"])
        df.to_csv(PARAM_FILE, index=False)
    df = pd.read_csv(PARAM_FILE)
    if "cl√©" not in df or "valeur" not in df:
        st.error("‚ö†Ô∏è Fichier parametres.csv corrompu. Restauration depuis backup‚Ä¶")
        restore_last_backup()
        df = pd.read_csv(PARAM_FILE)
    return df

def save_parametres(df_new):
    """Sauvegarde avec rollback si cl√© critique manquante"""
    try:
        # V√©rif cl√©s critiques
        missing = [k for k in CRITICAL_KEYS if k not in df_new["cl√©"].values]
        if missing:
            st.error(f"‚ùå Sauvegarde annul√©e. Cl√©s manquantes : {missing}")
            return False

        # Backup
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = BACKUP_DIR / f"parametres_backup_{ts}.csv"
        df_current = pd.read_csv(PARAM_FILE)
        df_current.to_csv(backup_path, index=False)

        # Save
        df_new.to_csv(PARAM_FILE, index=False)
        st.success("‚úÖ Param√®tres sauvegard√©s avec succ√®s")
        return True
    except Exception as e:
        st.error(f"‚ö†Ô∏è Erreur sauvegarde : {e}")
        return False

def restore_last_backup():
    """Restaure le dernier backup valide"""
    backups = sorted(BACKUP_DIR.glob("parametres_backup_*.csv"), reverse=True)
    if backups:
        last = backups[0]
        st.warning(f"‚è™ Restauration depuis {last.name}")
        df = pd.read_csv(last)
        df.to_csv(PARAM_FILE, index=False)
        return df
    else:
        st.error("‚ùå Aucun backup disponible")
        return pd.DataFrame(columns=["cl√©", "valeur"])

def get_param(key, default=None):
    """Acc√®s direct √† une cl√© param√®tre"""
    df = load_parametres()
    row = df.loc[df["cl√©"] == key, "valeur"]
    if not row.empty:
        return row.values[0]
    return default

# -----------------------
# CHARGEMENT PARAMETRES
# -----------------------
parametres = load_parametres()

# -----------------------
# CRM PAGE (fix grille vide)
# -----------------------
def page_crm():
    st.header("üìá CRM ‚Äî Grille centrale")
    # Exemple dataframe vide ou charg√©
    if os.path.exists("contacts.csv"):
        df = pd.read_csv("contacts.csv")
    else:
        df = pd.DataFrame(columns=["ID","Nom","Pr√©nom","Email","Type","Statut"])

    if df.empty:
        st.info("‚ÑπÔ∏è Aucun contact enregistr√© pour le moment.")
        return

    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_pagination()
    gb.configure_default_column(editable=False, groupable=True)
    gb.configure_selection("single", use_checkbox=True)
    gridOptions = gb.build()

    grid_response = AgGrid(
        df,
        gridOptions=gridOptions,
        update_mode=GridUpdateMode.SELECTION_CHANGED,
        height=400,
        fit_columns_on_grid_load=True
    )

    selected = grid_response["selected_rows"]
    if selected:
        st.subheader("üìå D√©tail du contact s√©lectionn√©")
        st.json(selected[0])

# -----------------------
# EVENEMENTS PAGE (fix s√©lection)
# -----------------------
def page_evenements():
    st.header("üìÖ Gestion des √âv√©nements")
    if os.path.exists("events.csv"):
        df = pd.read_csv("events.csv")
    else:
        df = pd.DataFrame(columns=["ID","Nom_√©v√©nement","Date","Lieu","Type"])

    if df.empty:
        st.info("‚ÑπÔ∏è Aucun √©v√©nement enregistr√© pour le moment.")
        return

    selected_event = None
    selected_event_name = st.selectbox("S√©lectionnez un √©v√©nement :", [""] + df["Nom_√©v√©nement"].tolist())
    if selected_event_name:
        selected_event = df[df["Nom_√©v√©nement"] == selected_event_name].iloc[0].to_dict()
        st.write("üìå √âv√©nement s√©lectionn√© :", selected_event)
# ---------------------------------------------------------
# OUTILS DONN√âES (chargement commun) + SCORING/TAGS/PROBA
# ---------------------------------------------------------
DATA_FILES = {
    "contacts": "contacts.csv",
    "events": "events.csv",
    "participations": "participations.csv",
    "interactions": "interactions.csv",
    "paiements": "paiements.csv",
    "certifications": "certifications.csv",
}

def df_or_empty(name, cols=None):
    path = DATA_FILES[name]
    if os.path.exists(path):
        df = pd.read_csv(path, encoding="utf-8")
        if cols:
            for c in cols:
                if c not in df.columns:
                    df[c] = np.nan
        return df
    else:
        return pd.DataFrame(columns=cols or [])

def save_df(name, df):
    df.to_csv(DATA_FILES[name], index=False, encoding="utf-8")

def to_list_param(key, sep="|"):
    """Retourne une liste √† partir d'une cl√© 'cl√©' dans parametres.csv (s√©parateur '|')."""
    dfp = load_parametres()
    val = dfp.loc[dfp["cl√©"] == key, "valeur"]
    if val.empty:
        return []
    return [x.strip() for x in str(val.values[0]).split(sep) if str(x).strip() != ""]

# ----------- R√àGLES/POIDS DE SCORING (param√©trables) -----------
def read_scoring_params():
    dfp = load_parametres()
    def gv(k, d):
        v = dfp.loc[dfp["cl√©"] == k, "valeur"]
        return float(v.values[0]) if not v.empty and str(v.values[0]).strip() != "" else d

    params_s = {
        "seuil_vip": gv("Seuil_VIP", 500000.0),
        "poids_inter": gv("Poids_Interaction", 1.0),
        "poids_part": gv("Poids_Participation", 1.0),
        "poids_pay": gv("Poids_Paiement_regle", 2.0),
        "fenetre_jours": gv("Fenetre_interactions_jours", 90.0),
        "min_inter_chaud": gv("Interactions_min", 3.0),
        "min_part_chaud": gv("Participations_min", 1.0),
    }
    return params_s

def compute_scoring_contacts():
    """Calcule Score, Tags, Probabilit√© (avec pastille) pour chaque contact, en s'appuyant sur les CSV et parametres.csv."""
    contacts = df_or_empty("contacts", ["ID","Nom","Pr√©nom","Email","Soci√©t√©","Type","Statut"])
    parts = df_or_empty("participations", ["ID","ID Contact","ID √âv√©nement","R√¥le","Inscription","Arriv√©e"])
    inter = df_or_empty("interactions", ["ID","ID Contact","Date","Canal","Objet","R√©sum√©","R√©sultat","Prochaine_Action","√âch√©ance","Responsable"])
    pay = df_or_empty("paiements", ["ID","ID Contact","ID √âv√©nement","Date Paiement","Montant","Moyen","Statut"])

    if contacts.empty:
        return contacts  # rien √† faire

    # Nettoyages min
    for col in ["Montant"]:
        if col in pay.columns:
            pay[col] = pd.to_numeric(pay[col], errors="coerce").fillna(0)

    # Param√®tres
    P = read_scoring_params()
    today = pd.Timestamp.today().normalize()

    # Interactions r√©centes (dans la fen√™tre)
    if "Date" in inter.columns:
        inter["_Date"] = pd.to_datetime(inter["Date"], errors="coerce")
        inter_recent = inter[inter["_Date"] >= (today - pd.Timedelta(days=int(P["fenetre_jours"])))]
    else:
        inter["_Date"] = pd.NaT
        inter_recent = inter.copy().iloc[0:0]

    # Agr√©gats
    nb_parts = parts.groupby("ID Contact")["ID"].count() if not parts.empty else pd.Series(dtype=float)
    nb_inter = inter.groupby("ID Contact")["ID"].count() if not inter.empty else pd.Series(dtype=float)
    nb_inter_recent = inter_recent.groupby("ID Contact")["ID"].count() if not inter_recent.empty else pd.Series(dtype=float)
    ca_regle = pay.loc[pay.get("Statut","").astype(str).str.lower().eq("r√©gl√©"), :].groupby("ID Contact")["Montant"].sum() if not pay.empty else pd.Series(dtype=float)

    # Assemblage
    contacts = contacts.copy()
    contacts["Interactions"] = contacts["ID"].map(nb_inter).fillna(0).astype(int)
    contacts["Interactions_recent"] = contacts["ID"].map(nb_inter_recent).fillna(0).astype(int)
    contacts["Participations"] = contacts["ID"].map(nb_parts).fillna(0).astype(int)
    contacts["CA_r√©gl√©"] = contacts["ID"].map(ca_regle).fillna(0).astype(float)

    # Score composite
    contacts["Score_composite"] = (
        contacts["Interactions"] * P["poids_inter"] +
        contacts["Participations"] * P["poids_part"] +
        (contacts["CA_r√©gl√©"] / 1000.0) * P["poids_pay"]
    ).round(2)

    # Tags
    tags = []
    for _, r in contacts.iterrows():
        t = []
        if r["CA_r√©gl√©"] >= P["seuil_vip"]:
            t.append("VIP (CA √©lev√©)")
        if r["Participations"] >= 3 and str(r.get("Statut","")).lower() not in ("client","membre"):
            t.append("R√©gulier-non-converti")
        # Ambassadeur : beaucoup d'interactions + participation
        if r["Interactions"] >= 5 and r["Participations"] >= 2:
            t.append("Ambassadeur")
        tags.append(", ".join(t))
    contacts["Tags"] = tags

    # Probabilit√© de conversion
    probas = []
    for _, r in contacts.iterrows():
        p = 0.2
        if r["Interactions_recent"] >= P["min_inter_chaud"] and r["Participations"] >= P["min_part_chaud"]:
            p = 0.8
            # Paiement partiel = bonus
            # si la colonne Statut existe et qu'au moins un paiement partiel r√©cent existe
            # (pour simplifier, nous boostons directement)
            p = 0.9
        elif r["Interactions"] >= 2:
            p = 0.5
        if p >= 0.8:
            badge = "üü¢"
        elif p >= 0.5:
            badge = "üü†"
        else:
            badge = "üî¥"
        probas.append(f"{int(p*100)}% {badge}")
    contacts["Proba_conversion"] = probas

    return contacts

# ---------------------------------------------------------
# PAGE RAPPORTS ‚Äî KPI Contacts + Participations + CA
# ---------------------------------------------------------
def page_rapports():
    st.header("üìä Rapports & KPI")

    contacts = df_or_empty("contacts", ["ID"])
    parts = df_or_empty("participations", ["ID","ID Contact","ID √âv√©nement"])
    pay = df_or_empty("paiements", ["ID","ID Contact","ID √âv√©nement","Montant","Statut","Date Paiement"])

    # KPI R√©el
    kpi_contacts = len(contacts)
    kpi_participations = len(parts)
    if not pay.empty:
        pay["Montant"] = pd.to_numeric(pay["Montant"], errors="coerce").fillna(0)
        kpi_ca = pay.loc[pay.get("Statut","").astype(str).str.lower().eq("r√©gl√©"), "Montant"].sum()
    else:
        kpi_ca = 0.0

    # Objectifs (parametres.csv ‚Üí bloc cl√©=valeur s√©par√© par lignes dans Cibles)
    cibles_blob = get_param("Cibles", "")
    cibles = {}
    if isinstance(cibles_blob, str) and cibles_blob.strip():
        for line in cibles_blob.splitlines():
            if "=" in line:
                k, v = line.split("=", 1)
                try:
                    cibles[k.strip()] = float(v.strip())
                except:
                    cibles[k.strip()] = v.strip()

    year = datetime.now().year
    target_contacts = cibles.get(f"kpi_target_contacts_total_year_{year}", 0)
    target_parts = cibles.get(f"kpi_target_participations_total_year_{year}", 0)
    target_ca = cibles.get(f"kpi_target_ca_regle_year_{year}", 0)

    df_kpi = pd.DataFrame({
        "KPI": ["contacts_total","participations_total","ca_regle"],
        "Objectif": [target_contacts, target_parts, target_ca],
        "R√©el": [kpi_contacts, kpi_participations, kpi_ca],
    })
    df_kpi["√âcart"] = df_kpi["R√©el"] - df_kpi["Objectif"]

    st.subheader("üéØ Objectifs vs R√©el")
    st.dataframe(df_kpi, use_container_width=True)

    # Graphiques simples
    st.subheader("üìà Visuels")
    c1, c2 = st.columns(2)
    with c1:
        st.metric("üë• Contacts", kpi_contacts)
        st.metric("‚úÖ Participations", kpi_participations)
    with c2:
        st.metric("üí∞ CA r√©gl√© (FCFA)", f"{kpi_ca:,.0f}")

    # Export Excel du rapport
    import io
    out = io.BytesIO()
    with pd.ExcelWriter(out, engine="xlsxwriter") as writer:
        df_kpi.to_excel(writer, sheet_name="KPI", index=False)
    st.download_button("‚¨áÔ∏è Exporter le rapport (Excel)", data=out.getvalue(),
                       file_name=f"Rapport_KPI_{year}.xlsx", mime="application/vnd.ms-excel")
# ---------------------------------------------------------
# PAGE ADMIN ‚Äî Param√©trage complet + Migration + Maintenance
# ---------------------------------------------------------
def page_admin():
    st.header("‚öôÔ∏è Admin ‚Äî Param√®tres, Migration & Maintenance")

    # ===== Param√®tres (√©dition front compl√®te) =====
    st.subheader("üõ†Ô∏è Param√®tres (√©ditables ici, stock√©s dans parametres.csv)")
    dfp = load_parametres().copy()

    st.caption("Astuce : double-cliquez dans une cellule pour modifier. Les listes sont s√©par√©es par ‚Äò|‚Äô.")
    edited = st.data_editor(
        dfp,
        num_rows="dynamic",
        use_container_width=True,
        hide_index=True,
        column_config={
            "cl√©": st.column_config.TextColumn("Cl√©"),
            "valeur": st.column_config.TextColumn("Valeur"),
        },
    )

    c1, c2, c3 = st.columns(3)
    with c1:
        if st.button("üíæ Enregistrer (avec sauvegarde & rollback s√©curis√©)"):
            ok = save_parametres(edited)
            if ok:
                st.success("Param√®tres mis √† jour. Les nouvelles r√®gles seront prises en compte.")
    with c2:
        if st.button("‚è™ Restaurer le dernier backup"):
            dfb = restore_last_backup()
            st.dataframe(dfb, use_container_width=True)
    with c3:
        if st.button("üìÇ Ouvrir le fichier local parametres.csv"):
            st.download_button("T√©l√©charger parametres.csv", data=open(PARAM_FILE, "rb").read(),
                               file_name="parametres.csv")

    st.markdown("---")

    # ===== Migration / Import-Export =====
    st.subheader("üì¶ Migration ‚Äî Import/Export Global & Multi-onglets")

    mode = st.radio("Mode de migration", ["Import Excel global (.xlsx)", "Import Excel multi-onglets (.xlsx)", "Export Excel global"], horizontal=True)

    import io
    import pandas as pd

    if mode.startswith("Import Excel"):
        up = st.file_uploader("Fichier Excel", type=["xlsx"])
        if st.button("Importer maintenant") and up:
            log = {"contacts":0,"interactions":0,"events":0,"participations":0,"paiements":0,"certifications":0,"rejects":[]}
            try:
                xls = pd.ExcelFile(up)

                def ensure_cols(df, needed):
                    for c in needed:
                        if c not in df.columns:
                            df[c] = np.nan
                    return df[needed]

                if mode == "Import Excel multi-onglets (.xlsx)":
                    # Feuilles par nom standard
                    sheets = {
                        "contacts": ["ID","Nom","Pr√©nom","Email","T√©l√©phone","Soci√©t√©","Type","Statut"],
                        "interactions": ["ID","ID Contact","Date","Canal","Objet","R√©sum√©","R√©sultat","Prochaine_Action","√âch√©ance","Responsable"],
                        "events": ["ID","Nom","Type","Date","Lieu","Co√ªt","Recette"],
                        "participations": ["ID","ID Contact","ID √âv√©nement","R√¥le","Inscription","Arriv√©e","Temps_Present","Feedback","Note","Commentaire"],
                        "paiements": ["ID","ID Contact","ID √âv√©nement","Date Paiement","Montant","Moyen","Statut","R√©f√©rence","Notes"],
                        "certifications": ["ID","ID Contact","Type","Date Examen","R√©sultat","Score","Date Obtention","Validit√©","Renouvellement","Notes"],
                    }
                    for tab, cols in sheets.items():
                        if tab.capitalize() in xls.sheet_names or tab in xls.sheet_names or tab.title() in xls.sheet_names or tab.upper() in xls.sheet_names:
                            sn = tab.capitalize() if tab.capitalize() in xls.sheet_names else (tab.title() if tab.title() in xls.sheet_names else (tab.upper() if tab.upper() in xls.sheet_names else tab))
                            df_new = pd.read_excel(xls, sheet_name=sn, dtype=str)
                            df_new = ensure_cols(df_new, cols)
                            base = df_or_empty(tab if tab!="events" else "events", cols)
                            merged = pd.concat([base, df_new], ignore_index=True)
                            save_df(tab if tab!="events" else "events", merged)
                            log[tab if tab!="events" else "events"] = len(df_new)
                else:
                    # Global : premi√®re feuille, colonne __TABLE__
                    sheet = xls.sheet_names[0]
                    gdf = pd.read_excel(xls, sheet_name=sheet, dtype=str)
                    if "__TABLE__" not in gdf.columns:
                        raise ValueError("Colonne '__TABLE__' absente du mod√®le global.")
                    # R√©partition
                    for tab in ["contacts","interactions","events","participations","paiements","certifications"]:
                        sub = gdf[gdf["__TABLE__"].str.lower()==tab].copy()
                        if sub.empty: 
                            continue
                        base = df_or_empty(tab)
                        merged = pd.concat([base, sub], ignore_index=True)
                        save_df(tab, merged)
                        log[tab] = len(sub)

                st.success("‚úÖ Import termin√©")
                st.json(log)
            except Exception as e:
                st.error(f"‚ùå Erreur d'import : {e}")

    elif mode == "Export Excel global":
        out = io.BytesIO()
        with pd.ExcelWriter(out, engine="xlsxwriter") as w:
            df_or_empty("contacts").to_excel(w, sheet_name="Contacts", index=False)
            df_or_empty("interactions").to_excel(w, sheet_name="Interactions", index=False)
            df_or_empty("events").to_excel(w, sheet_name="√âv√©nements", index=False)
            df_or_empty("participations").to_excel(w, sheet_name="Participations", index=False)
            df_or_empty("paiements").to_excel(w, sheet_name="Paiements", index=False)
            df_or_empty("certifications").to_excel(w, sheet_name="Certifications", index=False)
        st.download_button("‚¨áÔ∏è T√©l√©charger export.xlsx", data=out.getvalue(),
                           file_name="IIBA_export_global.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    st.markdown("---")

    # ===== Maintenance : Reset/Purge =====
    st.subheader("üßπ Maintenance")
    if st.button("üóëÔ∏è R√©initialiser la base (supprimer tous les CSV)"):
        for f in DATA_FILES.values():
            if os.path.exists(f):
                os.remove(f)
        st.warning("Base r√©initialis√©e. Rechargez l'application.")

    purge_id = st.text_input("ID √† purger (Contact/√âv√©nement/‚Ä¶)")
    if st.button("üîé Purger l'ID"):
        found = False
        for name, f in DATA_FILES.items():
            df = df_or_empty(name)
            if not df.empty and "ID" in df.columns and purge_id in df["ID"].astype(str).values:
                df = df[df["ID"].astype(str) != purge_id]
                save_df(name, df)
                found = True
        if found:
            st.success(f"ID {purge_id} supprim√© de la base.")
        else:
            st.info("ID non trouv√©.")

# ---------------------------------------------------------
# ROUTAGE
# ---------------------------------------------------------
def main():
    st.set_page_config(page_title="IIBA Cameroun ‚Äî CRM", layout="wide")
    st.sidebar.title("Navigation")
    choix = st.sidebar.radio("Aller √†", ["CRM (Grille centrale)", "√âv√©nements", "Rapports", "Admin"])

    if choix == "CRM (Grille centrale)":
        page_crm()
    elif choix == "√âv√©nements":
        page_evenements()
    elif choix == "Rapports":
        page_rapports()
    else:
        page_admin()

if __name__ == "__main__":
    main()
